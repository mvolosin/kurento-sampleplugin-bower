(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;

/**
 * Create a KmsSamplePlugin
 *
 * @classdesc
 *  Doc for sample plugin
 *
 * @extends module:corecore/abstracts.Filter
 *
 * @constructor module:sampleplugin.SamplePluginFilter
 */
function SamplePluginFilter(){
  SamplePluginFilter.super_.call(this);
};
inherits(SamplePluginFilter, Filter);


/**
 * Configures the edge threshold.
 *
 * @alias module:sampleplugin.SamplePluginFilter.setEdgeThreshold
 *
 * @param {external:Integer} edgeValue
 *  Value of edge threshold [0-255].
 *
 * @param {module:sampleplugin.SamplePluginFilter~setEdgeThresholdCallback} [callback]
 *
 * @return {external:Promise}
 */
SamplePluginFilter.prototype.setEdgeThreshold = function(edgeValue, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'edgeValue', edgeValue, {required: true});

  var params = {
    edgeValue: edgeValue,
  };

  return this._invoke(transaction, 'setEdgeThreshold', params, callback);
};
/**
 * @callback module:sampleplugin.SamplePluginFilter~setEdgeThresholdCallback
 * @param {external:Error} error
 */

/**
 * Configures the type of filter. 0 - black and white, 1 - Edges filter.
 *
 * @alias module:sampleplugin.SamplePluginFilter.setFilterType
 *
 * @param {external:Integer} filterType
 *  Value of filter type.
 *
 * @param {module:sampleplugin.SamplePluginFilter~setFilterTypeCallback} [callback]
 *
 * @return {external:Promise}
 */
SamplePluginFilter.prototype.setFilterType = function(filterType, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'filterType', filterType, {required: true});

  var params = {
    filterType: filterType,
  };

  return this._invoke(transaction, 'setFilterType', params, callback);
};
/**
 * @callback module:sampleplugin.SamplePluginFilter~setFilterTypeCallback
 * @param {external:Error} error
 */

/**
 * @alias module:sampleplugin.SamplePluginFilter.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter belongs
 */
SamplePluginFilter.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },
};

/**
 * @alias module:sampleplugin.SamplePluginFilter.events
 *
 * @extend module:corecore/abstracts.Filter.events
 */
SamplePluginFilter.events = Filter.events;

module.exports = SamplePluginFilter;

SamplePluginFilter.check = function(key, value)
{
  if(!(value instanceof SamplePluginFilter))
    throw ChecktypeError(key, SamplePluginFilter, value);
};

},{"inherits":3,"kurento-client":"kurento-client"}],2:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module sampleplugin
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var SamplePluginFilter = require('./SamplePluginFilter');


exports.SamplePluginFilter = SamplePluginFilter;

},{"./SamplePluginFilter":1}],3:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}]},{},[2]);
